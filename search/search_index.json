{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The WLCG Virtual Organization An instance of IAM has been deployed in support of WLCG development and integration activities in support of the migration to token-based authentication and authorization. The WLCG IAM instance is integrated with CERN SSO. Registration is active. IAM documentation is available here . Clients applications can be registered following these instructions , or using oidc-agent . VOMS support is enabled. To link an X.509 certificate to an existing IAM WLCG account, follow these instructions . As in VOMS, multiple certificates can be linked to an account. WLCG VO VOMS configuration VOMSES LSC To have a working VOMS configuration for the WLCG VO: place the lsc file in the /etc/grid-security/vomsdir/wlcg directory place the vomses file in the /etc/vomses directory (only needed if you need to do voms-proxy-init ) The latest supported VOMS clients are required (i.e., voms-proxy-init v. >=3 ). Also note that this VO is supported by IAM, i.e. there are no VOMS Admin endpoints that can be used to generate Gridmap files. Example $ voms-proxy-init -voms wlcg Enter GRID pass phrase for this identity: Contacting wlcg-voms.cloud.cnaf.infn.it:15001 [/DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=voms-wlcg.cloud.cnaf.infn.it] \"wlcg\"... Remote VOMS server contacted succesfully. Created proxy in /tmp/x509up_u501. Your proxy is valid until Thu Jan 30 03:47:58 CET 2020 $ voms-proxy-info -all subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it/CN=743668640 issuer : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it identity : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it type : RFC3820 compliant impersonation proxy strength : 1024 path : /tmp/x509up_u501 timeleft : 11:59:55 key usage : Digital Signature, Key Encipherment, Data Encipherment === VO wlcg extension information === VO : wlcg subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it issuer : /DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=wlcg-voms.cloud.cnaf.infn.it attribute : /wlcg attribute : /wlcg/xfers timeleft : 11:59:55 uri : wlcg-voms.cloud.cnaf.infn.it:15001","title":"The WLCG Virtual Organization"},{"location":"#the-wlcg-virtual-organization","text":"An instance of IAM has been deployed in support of WLCG development and integration activities in support of the migration to token-based authentication and authorization. The WLCG IAM instance is integrated with CERN SSO. Registration is active. IAM documentation is available here . Clients applications can be registered following these instructions , or using oidc-agent . VOMS support is enabled. To link an X.509 certificate to an existing IAM WLCG account, follow these instructions . As in VOMS, multiple certificates can be linked to an account.","title":"The WLCG Virtual Organization"},{"location":"#wlcg-vo-voms-configuration","text":"VOMSES LSC To have a working VOMS configuration for the WLCG VO: place the lsc file in the /etc/grid-security/vomsdir/wlcg directory place the vomses file in the /etc/vomses directory (only needed if you need to do voms-proxy-init ) The latest supported VOMS clients are required (i.e., voms-proxy-init v. >=3 ). Also note that this VO is supported by IAM, i.e. there are no VOMS Admin endpoints that can be used to generate Gridmap files.","title":"WLCG VO VOMS configuration"},{"location":"#example","text":"$ voms-proxy-init -voms wlcg Enter GRID pass phrase for this identity: Contacting wlcg-voms.cloud.cnaf.infn.it:15001 [/DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=voms-wlcg.cloud.cnaf.infn.it] \"wlcg\"... Remote VOMS server contacted succesfully. Created proxy in /tmp/x509up_u501. Your proxy is valid until Thu Jan 30 03:47:58 CET 2020 $ voms-proxy-info -all subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it/CN=743668640 issuer : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it identity : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it type : RFC3820 compliant impersonation proxy strength : 1024 path : /tmp/x509up_u501 timeleft : 11:59:55 key usage : Digital Signature, Key Encipherment, Data Encipherment === VO wlcg extension information === VO : wlcg subject : /DC=org/DC=terena/DC=tcs/C=IT/O=Istituto Nazionale di Fisica Nucleare/CN=Andrea Ceccanti aceccant@infn.it issuer : /DC=org/DC=terena/DC=tcs/C=IT/L=Frascati/O=Istituto Nazionale di Fisica Nucleare/CN=wlcg-voms.cloud.cnaf.infn.it attribute : /wlcg attribute : /wlcg/xfers timeleft : 11:59:55 uri : wlcg-voms.cloud.cnaf.infn.it:15001","title":"Example"},{"location":"token-based-authorization/","text":"Token-based authorization Getting an account on the wlcg IAM instance To register in the WLCG IAM instance, point your browser to the wlcg IAM VO page . If you have a CERN account, use that account to login to the wlcg VO. Registering a client in the WLCG IAM instance Getting tokens out IAM Scope-based authorization Group-based authorization Adding audience constraints","title":"Token-based authorization"},{"location":"token-based-authorization/#token-based-authorization","text":"","title":"Token-based authorization"},{"location":"token-based-authorization/#getting-an-account-on-the-wlcg-iam-instance","text":"To register in the WLCG IAM instance, point your browser to the wlcg IAM VO page . If you have a CERN account, use that account to login to the wlcg VO.","title":"Getting an account on the wlcg IAM instance"},{"location":"token-based-authorization/#registering-a-client-in-the-wlcg-iam-instance","text":"","title":"Registering a client in the WLCG IAM instance"},{"location":"token-based-authorization/#getting-tokens-out-iam","text":"","title":"Getting tokens out IAM"},{"location":"token-based-authorization/#scope-based-authorization","text":"","title":"Scope-based authorization"},{"location":"token-based-authorization/#group-based-authorization","text":"","title":"Group-based authorization"},{"location":"token-based-authorization/#adding-audience-constraints","text":"","title":"Adding audience constraints"},{"location":"token-based-authorization/doma-testbed/","text":"DOMA Token-based AuthZ Testbed Endpoints IAM https://wlcg.cloud.cnaf.infn.it RUCIO Install rucio client virtualenv rucio source rucio/bin/activate pip install rucio-clients mkdir rucio/etc cat > rucio/etc/rucio.cfg <<EOF [client] rucio_host = https://rucio-doma.cern.ch:443 auth_host = https://rucio-doma-auth.cern.ch:443 auth_type = x509_proxy # admin credentials #auth_type = userpass #username = ddmlab #password = secret account = root ca_cert = /etc/grid-security/certificates request_retries = 3 EOF Setup rucio client source rucio/bin/activate export RUCIO_HOME=`pwd`/rucio FTS ? dCache Prometheus dev endpoint DPM PRAGUE production endpoint Echo ? EOS ? StoRM CNAF production endpoint CNAF dev endpoint (not yet active) XRootD ?","title":"DOMA Token-based AuthZ Testbed"},{"location":"token-based-authorization/doma-testbed/#doma-token-based-authz-testbed","text":"","title":"DOMA Token-based AuthZ Testbed"},{"location":"token-based-authorization/doma-testbed/#endpoints","text":"","title":"Endpoints"},{"location":"token-based-authorization/doma-testbed/#iam","text":"https://wlcg.cloud.cnaf.infn.it","title":"IAM"},{"location":"token-based-authorization/doma-testbed/#rucio","text":"Install rucio client virtualenv rucio source rucio/bin/activate pip install rucio-clients mkdir rucio/etc cat > rucio/etc/rucio.cfg <<EOF [client] rucio_host = https://rucio-doma.cern.ch:443 auth_host = https://rucio-doma-auth.cern.ch:443 auth_type = x509_proxy # admin credentials #auth_type = userpass #username = ddmlab #password = secret account = root ca_cert = /etc/grid-security/certificates request_retries = 3 EOF Setup rucio client source rucio/bin/activate export RUCIO_HOME=`pwd`/rucio","title":"RUCIO"},{"location":"token-based-authorization/doma-testbed/#fts","text":"?","title":"FTS"},{"location":"token-based-authorization/doma-testbed/#dcache","text":"Prometheus dev endpoint","title":"dCache"},{"location":"token-based-authorization/doma-testbed/#dpm","text":"PRAGUE production endpoint","title":"DPM"},{"location":"token-based-authorization/doma-testbed/#echo","text":"?","title":"Echo"},{"location":"token-based-authorization/doma-testbed/#eos","text":"?","title":"EOS"},{"location":"token-based-authorization/doma-testbed/#storm","text":"CNAF production endpoint CNAF dev endpoint (not yet active)","title":"StoRM"},{"location":"token-based-authorization/doma-testbed/#xrootd","text":"?","title":"XRootD"},{"location":"token-based-authorization/oidc-agent/","text":"OIDC Agent oidc-agent is a set of tools to get and manage OpenID Connect tokens and make them easily usable from the command line. It follows the ssh-agent design, so users can handle OIDC tokens in a similar way as they do with ssh keys. Installation instructions Quick CENTOS7 installation recipe Current releases are available at GitHub This recipe shows how to quickly install oidc-agent on CENTOS 7. $ VERSION=$(curl --silent \"https://api.github.com/repos/indigo-dc/oidc-agent/releases/latest\" | grep -Po '\"tag_name\": \"v\\K.*?(?=\")') '\"tag_name\": \"v\\K.*?(?=\")' $ yum -y install epel-release $ yum -y install https://github.com/indigo-dc/oidc-agent/releases/download/v$VERSION/oidc-agent-$VERSION-1.el7.x86_64.rpm Bootstrapping oidc-agent The first thing to do is to start oidc-agent. This can be done issuing the following command: $ eval $(oidc-agent) Agent pid 62088 To install OIDC Agent from source or in a Debian/Ubuntu distro, please refer to oidc-agent instalation documentation How to register a client In order to obtain a token out of IAM, a user needs a client registered. oidc-agent can automate this step and store client credentials securely on the user machine. A new client can be registered using the oidc-gen command, as follows: $ oidc-gen -w device wlcg The -w device instructs oidc-agent to use the device code flow for the authentication, which is the recommended way with IAM. oidc-agent will display a list of different providers that can be used for registration: [1] https://iam-test.indigo-datacloud.eu/ [2] https://iam.deep-hybrid-datacloud.eu/ ... [16] https://wlcg.cloud.cnaf.infn.it/ Issuer [https://wlcg.cloud.cnaf.infn.it/]:_ Select one of the registered providers, or type a custom issuer (for IAM, the last character of the issuer string is always a /, e.g. https://wlcg.cloud.cnaf.infn.it/). Then oidc-agent asks for the scopes, typing max (without quotes) allows to get all the allowed scopes, or, one or more can be defined using spaces between them. oidc-agent will register a new client and store the client credentials and a refresh token locally in encrypted form (the agent will ask for a password from the user). How to print a list of all configured account To obtain a list of all configured accounts configured, either oidc-gen --accounts or oidc-add --list can be used. Both of them can use the same flag -l $ oidc-gen -l The following account configurations are usable: wlcg How to print a client description Printing the full client decrypted content can be done by passing the account shortname or the absolute filepath of the account, with oidc-gen --print or simply the -p flag $ oidc-gen -p wlcg Enter decryption password for account config 'wlcg': { \"name\": \"wlcg\", \"client_name\": \"oidc-agent:wlcg\", \"issuer_url\": \"https://wlcg.cloud.cnaf.infn.it/\", \"device_authorization_endpoint\": \"https://wlcg.cloud.cnaf.infn.it/devicecode\", \"daeSetByUser\": 0, \"client_id\": \"f062c71e-920d-4b64-8282-a24d4101d8fc\", \"client_secret\": \"xxxxxxxxxxxxxxxx\", \"refresh_token\": \"xxxxxxxxxxxxxxxx\", \"cert_path\": \"\", \"scope\": \"address openid profile storage.read:/ wlcg eduperson_entitlement storage.create:/ phone offline_access eduperson_scoped_affiliation storage.modify:/ email wlcg.groups\", \"audience\": \"\", \"redirect_uris\": [\"edu.kit.data.oidc-agent:/redirect\", \"http://localhost:8080\", \"http://localhost:4242\", \"http://localhost:10088\"], \"username\": \"\", \"password\": \"\", \"client_id_issued_at\": 1592322007, \"registration_access_token\": \"xxxxxxxxxxxxxx\", \"registration_client_uri\": \"xxxxxxxxxxxxxx\", \"token_endpoint_auth_method\": \"client_secret_basic\", \"grant_types\": [\"urn:ietf:params:oauth:grant-type:device_code\", \"refresh_token\"], \"response_types\": [\"token\"], \"application_type\": \"web\", \"cert_path\": \"\", \"audience\": \"\" } How to get a token from oidc-agent Tokens can be obtained using the oidc-token command, as follows: oidc-token wlcg This will request a token with all the scopes requested at client registration time. Limiting issued scopes To limit the scopes included in the token, the -s flag can be used, as follows: oidc-token -s storage.read:/ wlcg In this example the scopes is being limited to storage.read:/ Limiting token audience The token audience can be limited using the --aud flag, oidc-token --aud example.audience -s storage.read:/ wlcg In this example the audience is being defined as example.audience For more usage options please refer to oidc-agent --help or to oidc-agent usage documentation","title":"OIDC Agent"},{"location":"token-based-authorization/oidc-agent/#oidc-agent","text":"oidc-agent is a set of tools to get and manage OpenID Connect tokens and make them easily usable from the command line. It follows the ssh-agent design, so users can handle OIDC tokens in a similar way as they do with ssh keys.","title":"OIDC Agent"},{"location":"token-based-authorization/oidc-agent/#installation-instructions","text":"","title":"Installation instructions"},{"location":"token-based-authorization/oidc-agent/#quick-centos7-installation-recipe","text":"Current releases are available at GitHub This recipe shows how to quickly install oidc-agent on CENTOS 7. $ VERSION=$(curl --silent \"https://api.github.com/repos/indigo-dc/oidc-agent/releases/latest\" | grep -Po '\"tag_name\": \"v\\K.*?(?=\")') '\"tag_name\": \"v\\K.*?(?=\")' $ yum -y install epel-release $ yum -y install https://github.com/indigo-dc/oidc-agent/releases/download/v$VERSION/oidc-agent-$VERSION-1.el7.x86_64.rpm","title":"Quick CENTOS7 installation recipe"},{"location":"token-based-authorization/oidc-agent/#bootstrapping-oidc-agent","text":"The first thing to do is to start oidc-agent. This can be done issuing the following command: $ eval $(oidc-agent) Agent pid 62088 To install OIDC Agent from source or in a Debian/Ubuntu distro, please refer to oidc-agent instalation documentation","title":"Bootstrapping oidc-agent"},{"location":"token-based-authorization/oidc-agent/#how-to-register-a-client","text":"In order to obtain a token out of IAM, a user needs a client registered. oidc-agent can automate this step and store client credentials securely on the user machine. A new client can be registered using the oidc-gen command, as follows: $ oidc-gen -w device wlcg The -w device instructs oidc-agent to use the device code flow for the authentication, which is the recommended way with IAM. oidc-agent will display a list of different providers that can be used for registration: [1] https://iam-test.indigo-datacloud.eu/ [2] https://iam.deep-hybrid-datacloud.eu/ ... [16] https://wlcg.cloud.cnaf.infn.it/ Issuer [https://wlcg.cloud.cnaf.infn.it/]:_ Select one of the registered providers, or type a custom issuer (for IAM, the last character of the issuer string is always a /, e.g. https://wlcg.cloud.cnaf.infn.it/). Then oidc-agent asks for the scopes, typing max (without quotes) allows to get all the allowed scopes, or, one or more can be defined using spaces between them. oidc-agent will register a new client and store the client credentials and a refresh token locally in encrypted form (the agent will ask for a password from the user).","title":"How to register a client"},{"location":"token-based-authorization/oidc-agent/#how-to-print-a-list-of-all-configured-account","text":"To obtain a list of all configured accounts configured, either oidc-gen --accounts or oidc-add --list can be used. Both of them can use the same flag -l $ oidc-gen -l The following account configurations are usable: wlcg","title":"How to print a list of all configured account"},{"location":"token-based-authorization/oidc-agent/#how-to-print-a-client-description","text":"Printing the full client decrypted content can be done by passing the account shortname or the absolute filepath of the account, with oidc-gen --print or simply the -p flag $ oidc-gen -p wlcg Enter decryption password for account config 'wlcg': { \"name\": \"wlcg\", \"client_name\": \"oidc-agent:wlcg\", \"issuer_url\": \"https://wlcg.cloud.cnaf.infn.it/\", \"device_authorization_endpoint\": \"https://wlcg.cloud.cnaf.infn.it/devicecode\", \"daeSetByUser\": 0, \"client_id\": \"f062c71e-920d-4b64-8282-a24d4101d8fc\", \"client_secret\": \"xxxxxxxxxxxxxxxx\", \"refresh_token\": \"xxxxxxxxxxxxxxxx\", \"cert_path\": \"\", \"scope\": \"address openid profile storage.read:/ wlcg eduperson_entitlement storage.create:/ phone offline_access eduperson_scoped_affiliation storage.modify:/ email wlcg.groups\", \"audience\": \"\", \"redirect_uris\": [\"edu.kit.data.oidc-agent:/redirect\", \"http://localhost:8080\", \"http://localhost:4242\", \"http://localhost:10088\"], \"username\": \"\", \"password\": \"\", \"client_id_issued_at\": 1592322007, \"registration_access_token\": \"xxxxxxxxxxxxxx\", \"registration_client_uri\": \"xxxxxxxxxxxxxx\", \"token_endpoint_auth_method\": \"client_secret_basic\", \"grant_types\": [\"urn:ietf:params:oauth:grant-type:device_code\", \"refresh_token\"], \"response_types\": [\"token\"], \"application_type\": \"web\", \"cert_path\": \"\", \"audience\": \"\" }","title":"How to print a client description"},{"location":"token-based-authorization/oidc-agent/#how-to-get-a-token-from-oidc-agent","text":"Tokens can be obtained using the oidc-token command, as follows: oidc-token wlcg This will request a token with all the scopes requested at client registration time.","title":"How to get a token from oidc-agent"},{"location":"token-based-authorization/oidc-agent/#limiting-issued-scopes","text":"To limit the scopes included in the token, the -s flag can be used, as follows: oidc-token -s storage.read:/ wlcg In this example the scopes is being limited to storage.read:/","title":"Limiting issued scopes"},{"location":"token-based-authorization/oidc-agent/#limiting-token-audience","text":"The token audience can be limited using the --aud flag, oidc-token --aud example.audience -s storage.read:/ wlcg In this example the audience is being defined as example.audience For more usage options please refer to oidc-agent --help or to oidc-agent usage documentation","title":"Limiting token audience"}]}